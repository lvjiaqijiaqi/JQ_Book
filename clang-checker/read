自定义clang-checker

1.准备工作
下载cmake > cmake version 3.24.3

下载LLVM-project https://github.com/llvm/llvm-project
git clone https://github.com/llvm/llvm-project.git -b  llvmorg-13.0.0

Ninja编译 https://juejin.cn/post/7000886413168214052
mkdir llvm_ninja && cd llvm_ninja
cmake -S ../llvm-project/llvm -B build -G Ninja -DLLVM_ENABLE_PROJECTS="clang" -DCMAKE_INSTALL_PREFIX=xxx

cd build
ninja && ninja install

搭建外部编译环境生成xcode工程

cmake_minimum_required(VERSION 3.19)
project(MYClangCheckerPlugin)
set(CMAKE_OSX_ARCHITECTURES "x86_64")

set(CODE_SIGNING_ALLOWED NO)

# 设置 llvm 依赖
set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "../llvm_release/lib/cmake/llvm" "../llvm_release/lib/cmake/clang")

# 设置 CXX 版本
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${LLVM_COMPILE_FLAGS} -Wall -fno-rtti -std=c++14 -stdlib=libc++ -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS")


# 设置 clang和llvm
find_package(LLVM REQUIRED CONFIG)
include_directories(${LLVM_INCLUDE_DIRS})
add_definitions(${LLVM_DEFINITIONS})

find_package(Clang REQUIRED CONFIG)
include_directories(${CLANG_INCLUDE_DIRS})
add_definitions(${Clang_DEFINITIONS})

set(CMAKE_MODULE_LINKER_FLAGS "-Wl,-flat_namespace -Wl,-undefined -Wl,suppress")

# 引入 src 头文件
include_directories(src)

# 添加 Plugin Target
add_library(MYClangCheckerPlugin
  SHARED
  ${PROJECT_SOURCE_DIR}/src/*.cpp
  ${PROJECT_SOURCE_DIR}/src/*.h
)


